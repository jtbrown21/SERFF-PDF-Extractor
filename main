/**
 * n8n Function‑Item – 1‑in‑1‑out guarantee (v2)
 *
 * • Parses SERFF PDFs (both vertical and horizontal value layouts).
 * • Fans out one item per company in the Company Rate Information table.
 * • Keeps Top‑of‑Page, Filing‑at‑a‑Glance, and Rate Information identical for
 *   every item.
 * • If no valid company rows are found, emits a single placeholder item so the
 *   input still produces **one** output.
 * • If parsing throws, catches the error and emits a single `parse_error` item
 *   so downstream nodes never miss a record.
 */

// ---------- constants & helpers ------------------------------------------
const CONFIG = {
  fieldLabels: [
    'CompanyName',
    'Overall %IndicatedChange',
    'Overall %RateImpact',
    'Written PremiumChange for this Program',
    'Number of PolicyHolders Affected for this Program',
    'WrittenPremium for this Program',
    "Maximum %Change(where req'd)",
    "Minimum %Change(where req'd)",
  ],
  footerRe: /^PDF Pipeline for SERFF Tracking Number .* Generated .*$/im,
  endMarkers: [
    'general information', 'rate information', 'company rate information',
    'pdf pipeline', 'disposition',
  ],
  keyOnlyRe: /^([\w %()\-.+'/#]+):\s*$/,
  keyInlineRe: /^([\w %()\-.+'/#]+):\s*(.*)$/,
};
CONFIG.fieldRules = CONFIG.fieldLabels.map(l => ({
  key: l.toLowerCase().replace(/[^a-z0-9]+/g, ''),
  label: l,
}));
const norm = s => s.toLowerCase().replace(/[^a-z0-9]+/g, '');

// convert raw text that still contains escaped newline/quote sequences
function normalizeText(t) {
  if (!t) return t;
  const textMatch = t.match(/"text"\s*:\s*"([\s\S]*?)"\s*(,|$)/);
  if (textMatch) {
    t = textMatch[1];
  }
  if (!t.includes('\n') && t.includes('\\n')) {
    t = t
      .replace(/\\r\\n/g, '\n')
      .replace(/\\n/g, '\n')
      .replace(/\\t/g, '\t')
      .replace(/\\"/g, '"');
  }
  return t;
}

// heuristics --------------------------------------------------------------
const looksPercent = v => /^-?\d*(?:\.\d+)?%$/.test(v.trim()) || v.trim() === '%';
const looksCompany = v => /^[a-z][a-z .,&'-]{3,}$/i.test(v.trim());
const looksTracking = v => /^[A-Z]{2,}-\d{6,}/.test(v.trim());

// ---------- generic key:value parser -------------------------------------
function parseSection(lines) {
  const out = {};
  let lastKey = null;
  let prefix = '';
  for (let i = 0; i < lines.length; i++) {
    const line = lines[i].trim();
    if (!line) continue;

    // capture multi-line keys like "Effective Date" + "Requested (New):"
    if (/^effective date$/i.test(line)) {
      prefix = 'Effective Date ';
      lastKey = null;
      continue;
    }

    const inline = CONFIG.keyInlineRe.exec(line);
    if (inline) {
      const [, k, v] = inline;
      const fullKey = (prefix + k).trim();
      lastKey = norm(fullKey);
      out[lastKey] = v.trim();
      prefix = '';
      continue;
    }

    const keyOnly = CONFIG.keyOnlyRe.exec(line);
    if (keyOnly) {
      const label = (prefix + keyOnly[1]).trim();
      const nk = norm(label);
      let j = i + 1;
      while (j < lines.length && !lines[j].trim()) j++;
      const next = lines[j] ? lines[j].trim() : '';
      const isHeader = CONFIG.keyOnlyRe.test(next);
      out[nk] = (next && !isHeader) ? next : '';
      lastKey = nk;
      i = j;
      prefix = '';
      continue;
    }

    if (lastKey) {
      out[lastKey] = (out[lastKey] + '\n' + line).trim();
    }
  }
  return out;
}

// ---------- Company Rate block ➜ row objects -----------------------------
function parseCompanyRateRows(block) {
  const CHUNK = CONFIG.fieldLabels.length;
  let vals = String(block)
    .split('\n')
    .map(l => l.trim())
    .filter(Boolean);
  const maybeHeader = vals.slice(0, CHUNK)
    .map(v => v.replace(/:+$/, ''))
    .map(v => norm(v));
  const expected = CONFIG.fieldRules.map(fr => fr.key);
  if (maybeHeader.length === CHUNK && expected.every((e, i) => maybeHeader[i] === e)) {
    vals = vals.slice(CHUNK);
  }
  const trimmed = vals.slice();

  if (vals.length >= CHUNK - 1) {
    const m = vals[0].match(/^(.*?\S)\s+(-?\d.*%?)$/);
    if (m) vals = [m[1], m[2], ...vals.slice(1)];
  }
  const rows = [];
  const PERCENT_COLS = [1, 2, 6, 7];
  for (let i = 0; i + CHUNK - 1 < vals.length; i += CHUNK) {
    const slice = vals.slice(i, i + CHUNK);
    const first = slice[0];

    // stop scanning once we hit something that doesn't look like a company
    if (!looksCompany(first) || looksTracking(first) || /^company$/i.test(first)) {
      break;
    }

    if (PERCENT_COLS.some(idx => slice[idx] && !looksPercent(slice[idx]))) {
      continue;
    }

    const obj = {};
    slice.forEach((v, idx) => obj[CONFIG.fieldRules[idx].key] = v || '');
    rows.push(obj);
  }

  if (!rows.length) {
    if (trimmed.length === CHUNK - 1) {
      const m = trimmed[0].match(/^(.*?\S)\s+(-?\d.*%?)$/);
      if (m) {
        const tokens = [m[1], m[2], ...trimmed.slice(1)];
        const obj = {};
        tokens.forEach((v, idx) => obj[CONFIG.fieldRules[idx].key] = v || '');
        if (Object.values(obj).some(v => v)) rows.push(obj);
      }
    } else if (trimmed.length >= CHUNK) {
      const slice = trimmed.slice(0, CHUNK);
      const obj = {};
      slice.forEach((v, idx) => obj[CONFIG.fieldRules[idx].key] = v || '');
      if (Object.values(obj).some(v => v)) rows.push(obj);
    }
  }
  return rows;
}

// ---------- rate helpers -------------------------------------------------
function extractSERFF(text) {
  text = normalizeText(text);
  const cleaned = text
    .split('\n')
    .filter(l => !CONFIG.footerRe.test(l))
    .join('\n')
    .replace(/SERFF Tracking #:[\s\S]*?\n\s*\n/g, '');
  const lines = cleaned.split('\n').map(l => l.trim());

  const coCodes = Array.from(cleaned.matchAll(/CoCode:\s*(\d+)/gi), m => m[1].trim());

  const disapproved = /(serff status:|state status:|disposition status:)[^\n]*disapproved/i.test(cleaned);

  // Filing‑at‑a‑Glance ------------------------------------------------------
  const glaIdx = lines.findIndex(l => /^filing at a glance$/i.test(l));
  if (glaIdx === -1) throw new Error('Missing Filing at a Glance');
  const glaLines = [];
  for (let i = glaIdx + 1; i < lines.length; i++) {
    const t = lines[i].toLowerCase();
    if (CONFIG.endMarkers.includes(t)) break;
    glaLines.push(lines[i]);
  }
  const filingAtGlance = parseSection(glaLines);
  delete filingAtGlance.companies;

  if (disapproved) {
    return { disapproved: true, common: { filingAtGlance, rateInformation: {} }, rows: [] };
  }

  // Rate Information -------------------------------------------------------
  const txtLower = cleaned.toLowerCase();
  const startRI = txtLower.indexOf('rate data applies to filing');
  if (startRI === -1) throw new Error('Missing Rate Info');
  let endRI = cleaned.length;
  CONFIG.endMarkers.forEach(m => {
    const i = txtLower.indexOf(m, startRI + 1);
    if (i !== -1 && i < endRI) endRI = i;
  });
  const rateBlock = cleaned.slice(startRI, endRI);
  const riLineIdx = lines.findIndex(l => /rate data applies to filing/i.test(l));
  const RATE_KEYS = [
    'Filing Method',
    'Rate Change Type',
    'Overall Percentage of Last Rate Revision',
    'Effective Date of Last Rate Revision',
    'Filing Method of Last Filing',
    'SERFF Tracking Number of Last Filing',
  ];
  const rateInformation = {};
  RATE_KEYS.forEach(k => {
    const nk = norm(k);
    const rx = new RegExp(k.replace(/[-/()]/g, '\\$&') + '\\s*:\\s*([^\\r\\n]*)', 'i');
    const m = rx.exec(rateBlock);
    rateInformation[nk] = m ? m[1].trim() : '';
  });

  // Company Rate Information ----------------------------------------------
  const afterRI = lines.slice(riLineIdx + 1);
  const crIdx = afterRI.findIndex(l => /^company rate information$/i.test(l));
  if (crIdx === -1) return { common:{filingAtGlance, rateInformation}, rows: [] };
  const crLines = [];
  for (let i = crIdx + 1; i < afterRI.length; i++) {
    const t = afterRI[i].toLowerCase();
    if (CONFIG.endMarkers.includes(t) || /^serff tracking #:?/i.test(t)) break;
    crLines.push(afterRI[i]);
  }
  const rows = parseCompanyRateRows(crLines.join('\n'));
  rows.forEach((r, i) => { r.cocode = coCodes[i] || ''; });
  return { common:{filingAtGlance, rateInformation}, rows };
}

// ================== n8n wrapper =========================================
const out = [];

items.forEach(item => {
  try {
    const { common, rows, disapproved } = extractSERFF(item.json.text || '');
    if (rows.length) {
      rows.forEach(r => out.push({ json: { ...common.filingAtGlance, ...common.rateInformation, ...r } }));
    } else if (disapproved) {
      out.push({ json: { ...common.filingAtGlance } });
    } else {
      out.push({ json: { ...common.filingAtGlance, ...common.rateInformation, parse_warning: 'No Company Rate rows found' } });
    }
  } catch (err) {
    out.push({ json: { parse_error: err.message, snippet: (item.json.text || '').slice(0, 100) } });
  }
});

return out;
